<?xml version="1.0" encoding="UTF-8"?>
<node name="recover_deferred_position_r32f">
	<dependency name="ScreenPosition" type="float4" source="ScreenPosition" />
	<dependency name="deferred2" type="sampler2D" source="deferred2" />
	<dependency name="VPos" type="float2" source="VPos" />
	<dependency name="ScreenToViewX" type="float3" source="vScreenToViewX" />
	<dependency name="ScreenToViewY" type="float3" source="vScreenToViewY" />
	<dependency name="ScreenToViewZ" type="float3" source="vScreenToViewZ" />
	<dependency name="VPosToScreen" type="float4" source="vVPosToScreen" />
	<dependency name="ShaderModel" type="*" source="ShaderModel" />
	<output name="Out" type="float3" solution="DeferredPosition" />
	<case>
		<dependency name="ShaderModel" type="hlsl" source="ShaderModel" />
		<?hlsl
			float4 f4Deferred2 = tex2Dproj(deferred2, ScreenPosition);
			float2 f2ScreenPosition = VPos * VPosToScreen.xy + VPosToScreen.zw;
			float fLinearDepth = f4Deferred2.r;
			
			Out = (f2ScreenPosition.x * ScreenToViewX + f2ScreenPosition.y * ScreenToViewY + ScreenToViewZ) * fLinearDepth; 
		?>
	</case>
	<case>
		<dependency name="ShaderModel" type="hlsl5" source="ShaderModel" />
		<?hlsl
			float2 f2ScreenPositionTexcoord = float2(ScreenPosition.xy / ScreenPosition.w);
		
			float4 f4Deferred2 = deferred2_texture.Sample(deferred2_sampler, f2ScreenPositionTexcoord);
			float2 f2ScreenPosition = VPos * VPosToScreen.xy + VPosToScreen.zw;
			float fLinearDepth = f4Deferred2.r;
			
			Out = (f2ScreenPosition.x * ScreenToViewX + f2ScreenPosition.y * ScreenToViewY + ScreenToViewZ) * fLinearDepth;
		?>
	</case>
	<case>
		<dependency name="ShaderModel" type="glsl120" source="ShaderModel" />
		<?glsl
			vec4 f4Deferred2 = texture2DProj(deferred2, ScreenPosition);
			vec2 f2ScreenPosition = VPos * VPosToScreen.xy + VPosToScreen.zw;
			float fLinearDepth = f4Deferred2.r;
			
			Out = (f2ScreenPosition.x * ScreenToViewX + -f2ScreenPosition.y * ScreenToViewY + ScreenToViewZ) * fLinearDepth;
		?>
	</case>
	<case>
		<dependency name="ShaderModel" type="glsl" source="ShaderModel" />
		<?glsl
			vec4 f4Deferred2 = textureProj(deferred2, ScreenPosition);
			vec2 f2ScreenPosition = VPos * VPosToScreen.xy + VPosToScreen.zw;
			float fLinearDepth = f4Deferred2.r;
			
			Out = (f2ScreenPosition.x * ScreenToViewX + -f2ScreenPosition.y * ScreenToViewY + ScreenToViewZ) * fLinearDepth;
		?>
	</case>
</node>
